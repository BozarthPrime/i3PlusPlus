#!/usr/bin/env bash
#
# mfup
#
<<<<<<< HEAD
# Fetch and merge upstream changes, optionally with a branch
#

MFINFO=$(mfinfo) || exit

IFS=' ' read -a INFO <<< "$MFINFO"

=======
# - Fetch latest upstream and replace the PR Target branch with
# - Rebase the (current or specified) branch on the PR Target
# - Force-push the branch to 'origin'
#

[[ $# < 3 && $1 != "-h" && $1 != "--help" ]] || { echo "Usage: `basename $0` [1|2] [branch]" 1>&2 ; exit 1; }

MFINFO=$(mfinfo "$@") || exit 1
IFS=' ' read -a INFO <<< "$MFINFO"
>>>>>>> upstream-marlin/1.1.x
ORG=${INFO[0]}
FORK=${INFO[1]}
REPO=${INFO[2]}
TARG=${INFO[3]}
<<<<<<< HEAD
OLDBRANCH=${INFO[4]}

if [[ $OLDBRANCH == "(no" ]]; then
  echo "Branch is unavailable!"
  exit 1
fi

case "$#" in
  0 ) BRANCH=$OLDBRANCH ;;
  1 ) BRANCH=$1 ;;
  * ) echo "Usage: `basename $0` [branch]" 1>&2 ; exit 1 ;;
esac

set -e

echo "Fetching upstream ($ORG/$REPO)..."
git fetch upstream

echo ; echo "Bringing $TARG up to date..."
git checkout -q $TARG || git branch checkout upstream/$TARG -b $TARG && git push --set-upstream origin $TARG
git merge upstream/$TARG
git push origin

if [[ $BRANCH != $TARG ]]; then
  echo ; echo "Rebasing $BRANCH on $TARG..."
  if git checkout $BRANCH; then
    echo
    if git rebase $TARG; then
      git push -f ; echo
      [[ $BRANCH != $OLDBRANCH ]] && git checkout $OLDBRANCH
    else
      echo "Looks like merge conflicts. Stopping here."
    fi
  else
    echo "No such branch!" ; echo
    git checkout $OLDBRANCH
  fi
fi
=======
BRANCH=${INFO[4]}
CURR=${INFO[5]}

set -e

# Prevent accidental loss of current changes
[[ $(git stash) != "No local "* ]] && HAS_STASH=1

echo "Fetching upstream ($ORG/$REPO)..."
git fetch upstream

if [[ $BRANCH != $TARG ]]; then
  echo ; echo "Rebasing $BRANCH on $TARG..."
  if [[ $BRANCH == $CURR ]] || git checkout $BRANCH; then
    if git rebase upstream/$TARG; then
      git push -f
    else
      echo "Looks like merge conflicts. Stopping here."
      exit
    fi
  else
    echo "No such branch!"
  fi
else
  git reset --hard upstream/$TARG
fi

echo
[[ $BRANCH != $CURR ]] && git checkout $CURR

[[ $HAS_STASH == 1 ]] && git stash pop
>>>>>>> upstream-marlin/1.1.x
